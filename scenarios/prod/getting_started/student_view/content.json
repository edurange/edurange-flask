{
    "ScenarioTitle": "Getting Started",
    "StudentGuide": {
        "TotalQuestions": 7,
        "TotalPoints": 113,
        "SectionOrder": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        ],
        "Sections": [
            {
                "Count": 1,
                "Title": "Welcome to Cybersec",
                "Order": [
                    [
                        "r",
                        "1"
                    ]
                ]
            },
            {
                "Count": 2,
                "Title": "Using the Terminal Commands",
                "Order": [
                    [
                        "r",
                        "2"
                    ]
                ]
            },
            {
                "Count": 3,
                "Title": "Linux File System",
                "Order": [
                    [
                        "r",
                        "3"
                    ]
                ]
            },
            {
                "Count": 4,
                "Title": "Commands",
                "Order": [
                    [
                        "r",
                        "4"
                    ],
                    [
                        "q",
                        "1"
                    ],
                    [
                        "q",
                        "2"
                    ],
                    [
                        "r",
                        "5"
                    ],
                    [
                        "q",
                        "3"
                    ],
                    [
                        "r",
                        "6"
                    ]
                ]
            },
            {
                "Count": 5,
                "Title": "File Types",
                "Order": [
                    [
                        "r",
                        "7"
                    ],
                    [
                        "q",
                        "4"
                    ]
                ]
            },
            {
                "Count": 6,
                "Title": "Case Sensitivity/touch/echo/Angle Brackets",
                "Order": [
                    [
                        "r",
                        "8"
                    ],
                    [
                        "q",
                        "5"
                    ]
                ]
            },
            {
                "Count": 7,
                "Title": "vim, Regular expresssions, and find",
                "Order": [
                    [
                        "r",
                        "9"
                    ],
                    [
                        "q",
                        "6"
                    ]
                ]
            },
            {
                "Count": 8,
                "Title": "More Commands",
                "Order": [
                    [
                        "r",
                        "10"
                    ]
                ]
            },
            {
                "Count": 9,
                "Title": "Final Mission",
                "Order": [
                    [
                        "r",
                        "11"
                    ],
                    [
                        "q",
                        "7"
                    ]
                ]
            }
        ],
        "Readings": {
            "1": "<h2>Welcome to Cybersec</h2>\n<h3>Your Briefing</h3>\n<p>Congratulations and welcome to CyberSec. As an intern you will need to complete this training on how to use the command line. You may need to strengthen your command line skills before you can complete the other parts of your training. Remember, this world is being controlled by the malicious corporations and individuals and we must learn to protect ourselves from their invasive attacks. We must protect our data. This is why you are here. To protect yourself, your company and your community. And it all starts here, at the beginning, with a terminal command prompt.</p>\n<h3>How to Connect</h3>\n<p>Use the credentials and IP Address provided on the scenario page to SSH into the exercise</p>",
            "2": "<h2>Using the Terminal Commands</h2>\n<p>When using your computer (Mac, Linux, Windows) you typically are using a GUI (Graphical User Interface). It's a pretty representation of how your computer works. To really get into the â€˜guts' of your computer and to really learn how to control it we will learn how to use the terminal. The terminal is a text based representation of your computer (rather than graphical). Learning to use the terminal will help you along your path to protecting your community and your self.</p>\n<p>Why should you learn the command line?</p>\n<ul>\n<li>\n<p>You gain greater control over the system (computer) because you have more options</p>\n</li>\n<li>\n<p>You can script repetitive tasks. A GUI interface just doesn't have the option to loop.</p>\n</li>\n<li>\n<p>Doing anything from a simple task of renaming a file, changing a user information and searching for files is faster and easier through command line once you are comfortable with it.</p>\n</li>\n<li>\n<p>Scalability</p>\n</li>\n<li>\n<p>Scriptability</p>\n</li>\n<li>\n<p>Simple design</p>\n</li>\n<li>\n<p>Simple interface</p>\n</li>\n<li>\n<p>Stable design: sometimes it is the only interface you have</p>\n</li>\n</ul>\n<p>In summation, it allows you to do stuff faster than GUI and provides built in automation support.</p>",
            "3": "<h2>Linux File System</h2>\n<h3>Hierarchy</h3>\n<p>Linux folders and files are arranged like an upside down tree, where the slash <code>/</code> is called the root node, or beginning, of all your files in the entire computer. The root is the base of the tree and as you go down it keeps splitting into branches and leaves. The leaves would be a file and the branches are folders. This means that if you want to search the entire file system, you need to start at<code>/</code></p>\n<h3><code>/</code> vs. logging in as root</h3>\n<p>The root, signified by a <code>/</code>, is the beginning of your files. But you can also log in as the root user. When you do this, your home directory (where your files are typically saved) is in the folder <code>/root</code> not at, <code>/</code>. The <code>/root</code> folder is not to be confused with the slash (root) the beginning of all the files. Just like if you were logged in as student you would typically save your files in <code>/home/student</code>, whereas the root user saves their files in <code>/root</code>.</p>\n<h3>Important</h3>\n<p>A root user is someone who has access to everything on the computer. They could even delete everything in a computer. It is best practices to disable root or use a VERY strong password. For example using numbers, letters, capitals, special symbols and a random sampling of each, and no dictionary words.</p>",
            "4": "<h2>Commands</h2>\n<p>What is a command? Commands are executable programs that you can call from your command-line terminal. The most common place to look for bash commands is in the <code>/bin</code> folder. Let's get started right away and use two different commands.</p>\n<h3>cd</h3>\n<p><code>cd</code> stands for \"change directory\", meaning to navigate to a new folder. <code>cd ..</code> sends you backwards (up) a level. Try using <code>cd</code> to enter the folder <code>/bin</code> then <code>cd</code> back to your home directory.</p>\n<h3>ls</h3>\n<p><code>ls</code> \"lists\" the files and directories of where you are now. Note that directories (folders) and files are shown in different colors. Hidden files and directories have names that start with a period (e.g. <code>.hiddenfolder</code>)</p>",
            "5": "<h3>Man Pages</h3>\n<p>\"Man\" pages is short for manual pages. These are text documents with lots of information on commands. Remember the command we did for listing our files, <code>ls</code>? Let's find that man page.</p>\n<p>Type</p>\n<pre><code class=\"language-sh\">man ls\n</code></pre>\n<p>and hit enter. You can use the arrow keys to navigate the man page.</p>\n<p>There are parameters and options you can give a command. What if you wanted to list the permissions of a file and find hidden files?</p>\n<p>Try using <code>man</code> to find the <code>ls</code> options to show: <ul><li>ALL files</li><li>In a list format</li></ul></p>\n<p>(If you're struggling with this, look at the bottom of this section!)</p>\n<p>That's a lot of info! What you see is all the files and folders in the folder you are at currently.</p>\n<ul>\n<li>\n<p>The first column is the type of file followed by permissions. <code>-</code> means a regular file. <code>d</code> is a directory (folder). <code>l</code> is a link. <code>rwx</code> are the permission for each file. <code>rwx</code> stands for <code>7</code> so <code>rwxrwxrwx</code> would be <code>777</code>. These correspond to binary. There are 3 bits. <code>000</code> would stand for <code>0</code>. <code>111</code> is <code>7</code>. <code>101</code> is <code>5</code>, etc. Each file has visible 3 permissions User, Group, Anyone.</p>\n</li>\n<li>\n<p>The next column is the number of links or directories in the folder</p>\n</li>\n<li>\n<p>The 3rd column is the user that owns the folder/file</p>\n</li>\n<li>\n<p>The 4th column is the group that owns the folder/file</p>\n</li>\n<li>\n<p>The 5th is the size of the folder/file</p>\n</li>\n<li>\n<p>The 6th is the month day and time it was last edited/touched (we'll learn about <code>touch</code> soon!)</p>\n</li>\n<li>\n<p>And finally the file name</p>\n</li>\n</ul>\n<p>The flags you should have found were <code>-l</code> and <code>-a</code>, though you can combine them in one command, like <code>ls -la</code>. Let's look at an efficient way to find those flags in the man page! First, open the man page for <code>ls</code>.</p>\n<h4>-l</h4>\n<p>To search inside a man page, you use a <code>/</code> . Now type <code>/-l</code> and hit enter. You will probably see the page move to the first occurrence found and on top of that you should see that <code>-l</code> was highlighted. To move around your search keep hitting <code>n</code> (stands for next) until you see <code>-l</code> highlighted to the left. This will be above <code>-L</code> Long listing stands for listing the items in a row as seen in figure 2</p>\n<h4>-a</h4>\n<p>Type <code>/-a</code> and hit enter. Hit <code>n</code> till you can't go any further. Now hit <code>b</code> (stands for back) until you find the entry for <code>-a</code> which is above <code>-A</code>. The man page is telling you that files that start with <code>.</code> like <code>.bashrc</code> (which are typically hidden) are now going to be displayed.</p>\n<h4>More Info</h4>\n<p>When in a man page and you need to get out, just type <code>q</code></p>\n<p>Try opening the man page for <code>mv</code>. Can you give a brief description of what the command <code>mv</code> does?</p>\n<p>Note: If you don't see your search item highlighted, you may have typed something by mistake or your console colors may not be optimized. If you typed something by mistake, just retype <code>/-l</code> etc.</p>",
            "6": "<h3>pwd</h3>\n<p><code>pwd</code> stands for \"Print working directory\" - it will tell you where you are within the filesystem.\nNow type in</p>\n<pre><code class=\"language-sh\">pwd\n</code></pre>\n<p>You should see something similar to <code>/home/yourusername</code>. To learn more, type <code>man pwd</code> , then to get out of that page type <code>q</code></p>\n<h3>sudo</h3>\n<p>Sometimes commands can only be run as a super user. This is when the command sudo comes to use (which stands for: superuser do). This gives unprivileged users access to privileged commands. The use of sudo in EDURange is restricted, however.</p>",
            "7": "<h2>File Types</h2>\n<p>Not all files appear as they really are. Just because you see a file that says, <code>imanimage.png</code> does not mean that it is an image. It could be a text file or a harmful file if executed! So... how do you protect yourself? One way is with the file command!</p>\n<h3>file</h3>\n<p>The command to find out what a file really is regardless of its extension is <code>file</code>. Check out the man page by typing in <code>man file</code>. What type of options are there with file? Now let's test it. Type <code>q</code> to get out of the man page.</p>\n<p>There are 2 files in your Linux box in a folder at your home directory called <code>/toLearn</code> . One is called <code>cat.jpg</code> and the other is <code>dog.jpg</code></p>\n<p>Both look like images to me! But if you try <code>file</code> and some other commands from the previous sections, you may notice some differences between their sizes and other properties.</p>\n<h3>cat</h3>\n<p>Now let's learn a new command, cat. cat prints out the text from a file.</p>\n<p>Type</p>\n<pre><code class=\"language-sh\">cat dog.jpg\n</code></pre>\n<p>Go through to the end\nYou should see something like:</p>\n<p><code>meow I am a doggo</code></p>\n<p>In your home directory there is a folder called <code>stuff</code>. One file in the <code>stuff</code> folder is not what it seems; find the secret code inside.</p>",
            "8": "<h2>Case Sensitivity/touch/echo/Angle Brackets</h2>\n<h3>Case Sensitivity</h3>\n<p>Case sensitivity means that HoW yoU labEL yoUR files matters. If you search for a file called hiya.docx, it would not be the same as finding a file, hiyA.docX.</p>\n<h3>touch</h3>\n<p><code>touch</code> is a command that \u2018touches' a file. If the file exists it updates its modified date. If the file does not exist, then the file will be created with nothing in it. <code>man touch</code> to learn more.</p>\n<h3>echo</h3>\n<p><code>echo</code> will copy what you write to stdout (standard out, explained more later). You can use this in many different ways.</p>\n<p>Type</p>\n<pre><code class=\"language-sh\">echo &quot;This is echoed&quot;\n</code></pre>\n<p>You will see that it was repeated back to you!</p>\n<h3>Angle Brackets</h3>\n<p>Angle Brackets are <code>&gt;</code> <code>&gt;&gt;</code> <code>&lt;</code> <code>&lt;&lt;</code> . They have many uses. <code>&gt;</code> Will replace a file with what you input. If the file already existed <code>&gt;</code> will delete everything in that file and replace it with what you sent it. In contrast if you use <code>&gt;&gt;</code> , this will append what you sent to the bottom of the file, leaving the rest of the file intact. Let's give it a try.</p>\n<p>Type</p>\n<pre><code class=\"language-sh\">echo &quot;This is cool&quot; &gt; newfile\ncat newfile\n</code></pre>\n<p>Now type</p>\n<pre><code class=\"language-sh\">echo &quot;This is cool too&quot; &gt; newfile\ncat newfile\n</code></pre>\n<p>You can see that <code>&gt;</code> will replace any text with what you send it. While <code>&gt;&gt;</code> will append to a file</p>\n<p>Type</p>\n<pre><code class=\"language-sh\">echo &quot;This is another thing&quot; &gt;&gt; secondfile\necho &quot;Hello World&quot; &gt;&gt; secondfile\ncat secondfile\n</code></pre>\n<p>Now let's combine the two files.</p>\n<p>Type</p>\n<pre><code class=\"language-sh\">cat newfile &gt;&gt; secondfile\ncat secondfile\n</code></pre>\n<p>You can see the newfile appended to the end of secondfile whereas if you <code>cat</code> newfile it will still only have what we added to it earlier.</p>\n<p>One of the most useful tricks you can use angle brackets for is suppressing error messages. If you want to suppress all errors that may result from a command, add '2&gt;/dev/null' to the end of your command. Ex: \"find . filename 2&gt;/dev/null\". To learn more about what the number 2 stands for there, and what /dev/null is, read <a href=\"https://linuxhint.com/two-dev-null-command-purpose/\">this</a> reference on tty streams.</p>\n<p>There is a folder in your home directory called <code>textfiles</code>. There are three files, append them all to a new file called <code>alltogether.txt</code> in your personal directory. (Your home directory)</p>\n<p>There are many ways to accomplish this in one line, here is a hint for one way: type</p>\n<p><code>echo \"one\"; echo \"two\"; echo \"three\";</code></p>",
            "9": "<h2>vim, Regular expresssions, and find</h2>\n<h3>vim</h3>\n<p>vim is a program that is used to edit files, and will hopefully be your new best friend! There are different editors out there for example, nano and emacs. To create a file just type</p>\n<pre><code class=\"language-sh\">vim mynewfile.txt\n</code></pre>\n<p>Or</p>\n<pre><code class=\"language-sh\">vim thisisfun\n</code></pre>\n<p>To edit a file that is already created it's the same procedure, just make sure not to misspell it or you'll create a new file with that spelling.</p>\n<p>Once you are in vim the main key strokes to editing a file are:</p>\n<ul>\n<li>\n<p><code>i</code> - This puts you in edit mode to type and delete text like you normally would</p>\n</li>\n<li>\n<p><code>esc</code> - Hitting the escape key will take you out of edit mode. <code>:w</code> - These keystrokes will save the file. <code>w</code> stands for write. <code>:q!</code> - To quit without saving. Did you edit a file and don't want to commit that change? These keystrokes will exit vim and NOT save your file.</p>\n</li>\n<li>\n<p><code>:q</code> - These keystrokes will quit the vim program. You can also do <code>:wq</code> to save the file and quit right away. <code>:q</code> will not work unless you have saved your file or you have made no changes what-so-ever.</p>\n</li>\n</ul>\n<p><code>dd</code> - When you are NOT in edit mode this will delete an entire line. (Make sure your cursor is on the line you want to delete).</p>\n<p><code>u</code> - If you make changes that you didn't mean to, you can press <code>u</code> for 'undo' - And if you undo too many things you can press Ctrl+R to 'redo'</p>\n<p><code>0</code> - zero will take you to the beginning of a line</p>\n<p><code>$</code> - will take you to the end of a line</p>\n<p>There is a LOT that vim can do but we won't list it all here. Do a search on the internet to learn more! You can also check out a vim command cheat sheet, here and here. But at the end of this lesson will be a couple more commands that you will find to be amazingly helpful! You can also check out vimtutor:</p>\n<pre><code class=\"language-sh\">vimtutor\n</code></pre>\n<p>In your home directory in a folder called <code>editme</code> there is a file called <code>editme.txt</code>, try opening that up in vim and deleting lines 4 and 5, and adding 2 more lines of anything you would like at the end of the file. Don't forget to save!</p>\n<h3>Regular Expressions</h3>\n<p>Regular expressions are used to help you find something on your computer and can be used in programming to enhance your programs. There are a LOT of websites out there that teach you all about it but the gist is that you can use symbols like a <code>*</code> to mean something when parsing through text. For example, the <code>*</code> is a wild card. Let's say I wanted to find a file with the word spekter in it. But there could be other text before and after the word spekter. So I could say search for, <code>*spekter*</code>. This means, search for spekter and I don't care if there is anything else before or after.</p>\n<p>To learn about how powerful regular expressions are, check out these sites:</p>\n<p><a href=\"https://regexone.com\">regular expressions 1</a></p>\n<p><a href=\"https://regexr.com\">regular expressions 2</a></p>\n<h3>find</h3>\n<p>This leads us to find. find is a very helpful tool that you can use to find things on your computer. Take a moment to peruse the man page for find. (man find) Get an idea of how it is used.</p>\n<p>An example as given earlier:</p>\n<pre><code class=\"language-sh\">find . -type f -iname *spekter*\n</code></pre>\n<ul>\n<li>\n<p>What you see is the command find. The next <code>.</code> is telling us where we want to find. It's the path. The dot means, search in this location where I am at. We could also type in <code>/Documents</code> or a full path from the root. Where ever you need to search.</p>\n</li>\n<li>\n<p>The parameter <code>-type</code> is telling find that you specifically want to find a type of object, in this case, <code>f</code> stands for a regular file.</p>\n</li>\n<li>\n<p><code>-iname</code> is telling the name of the file we are looking for. You can also use <code>-name</code> but <code>-iname</code> is case insensitive. This means that my search will pull up, SpeKter as well.</p>\n</li>\n<li>\n<p>Lastly, the <code>*</code>'s on either side again tell find that I want everything with spekter in it, regardless of what is around it. If I did not add that, my find will pull up nothing.</p>\n</li>\n</ul>\n<p>Hidden throughout your home directory are image files with the name, <code>edurange</code>. Use your new skills to find all 6. Create a new file in your home directory and put the location and type of each in that file. Remember there are many types of file images. Png, jpg, jpeg, and gif to name the widely used ones.</p>",
            "10": "<h2>More Commands</h2>\n<h3>mv</h3>\n<p><code>mv</code> is used to move a file from one location to another, or to rename a file. Type <code>man mv</code> to learn more.</p>\n<h3>cp</h3>\n<p><code>cp</code> is used to copy a file to a new location. Type <code>man cp</code> to learn more.</p>\n<h3>less</h3>\n<p>less is more. The command less is used to open larger files, page by page. It allows you more tools to read a file in an organized fashion.</p>\n<h3>cowsay</h3>\n<p>cowsay is probably one of the best commands... ever. Well maybe not ever, but it is fun!</p>\n<pre><code class=\"language-sh\">cowsay &quot;this is fun&quot;\n</code></pre>\n<h3>fortune</h3>\n<p>fortune gives you, well, a fortune! Go ahead and give it a whirl!</p>\n<h3>Piping</h3>\n<p>Piping is a new concept, but stick with me on this one. When you give input to a command it is considered a standard in (STDIN). In other words it is data that is fed to a program/command. Whereas when you see something printed out back to you it is using standard out (STDOUT). A pipe, also recognized as <code>|</code> is used when you want something that is a STDOUT to then be used as the STDIN. To understand this we will use a fun example.</p>\n<p>Remember fortune? If we just type fortune we get a fortune back. That fortune we get back is a STDOUT. But when we use cowsay we type something for the cow to say, which is STDIN. So we can use a pipe to take our fortune and have the cow say it!</p>\n<pre><code class=\"language-sh\">fortune | cowsay\n</code></pre>\n<h3>More vim</h3>\n<p>There are a few more really useful commands I would like to teach you about vim.</p>\n<p>If you want to open up multiple files at the same time you can do:</p>\n<pre><code class=\"language-sh\">vim fileone filetwo.c filethree.h filefour.cc\n</code></pre>\n<p>Or you can open up another file or create a new file while you are still in vim with:</p>\n<pre><code class=\"language-sh\">:e anotherfile.js\n</code></pre>\n<p>And you can jump from file to file with the <code>:b</code> keystrokes and using tab to go through which file you would like to edit next.</p>",
            "11": "<h2>Final Mission</h2>\n<p>Here at CyberSec you have been well trained, recruit. Now let's put your training to test! This is a real mission of the utmost importance. Complete this, and you are assured a spot on our team.</p>\n<p>Our intelligence has told us that somewhere in your computer is an image that is vital to our operations. This image has a weird name but we know for certain that it contains the word <code>cowFJS</code> in it. This file is somewhere on the system, but it is NOT in your home directory. Through our sources we also know that there is ANOTHER file in that folder. COPY both the image and second file to your home directory in a new folder, called <code>final-mission</code>. Then create a new file in the <code>final-mission</code> folder called <code>cowsay.file</code> with the contents of the cowsay man file in it.</p>"
        },
        "Questions": {
            "1": {
                "Text": "How many subdirectories are in your home directory? (Not including hidden directories)",
                "Type": "Number",
                "Options": [
                    "accept-integer",
                    "accept-decimal"
                ],
                "Answers": [
                    {
                        "Value": 7,
                        "Points": 15
                    }
                ],
                "Points": 15
            },
            "2": {
                "Text": "In your home directory there is subdirectory named followMe. Travel into the directory as far as you can go. At the end there is a file. What is the name of the file?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "$RANDOM_ONE",
                        "Points": 15
                    }
                ],
                "Points": 15
            },
            "3": {
                "Text": "What does the line below NAME on the man page for the \"file\" command say?",
                "Type": "String",
                "Options": [],
                "Answers": [
                    {
                        "Value": "file \u2014 determine file type",
                        "Points": 15
                    },
                    {
                        "Value": "file - determine file type",
                        "Points": 15
                    }
                ],
                "Points": 15
            },
            "4": {
                "Text": "What is the secret code in the text file in the stuff directory? (If you try and read a non-ASCII text file, something WILL break!!)",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "$RANDOM_TWO",
                        "Points": 15
                    }
                ],
                "Points": 15
            },
            "5": {
                "Text": "What command or list of commands did you use to create a file with the contents of the three files in the textfiles directory? (Endless approaches, this question will not be graded automatically)",
                "Type": "Essay",
                "Options": [],
                "Answers": [
                    {
                        "Value": "ESSAY",
                        "Points": 15
                    }
                ],
                "Points": 15
            },
            "6": {
                "Text": "What are the filenames (with extensions) of the six image files hidden in your home directory that contain edurange in the name? Please enter each filename separately.",
                "Type": "Multi String",
                "Options": [],
                "Answers": [
                    {
                        "Value": "edurange5meow.JPG",
                        "Points": 3
                    },
                    {
                        "Value": "edurange001.gif",
                        "Points": 3
                    },
                    {
                        "Value": "4edurange.jpeg",
                        "Points": 3
                    },
                    {
                        "Value": "edurange006weeeeeee.png",
                        "Points": 3
                    },
                    {
                        "Value": "002edurange.jpg",
                        "Points": 3
                    },
                    {
                        "Value": "edurange3.GIF",
                        "Points": 3
                    }
                ],
                "Points": 18
            },
            "7": {
                "Text": "What is the absolute path of the directory containing the file that has 'cowFJS' in its name? (Just the path to the directory, no filename)",
                "Type": "String",
                "Options": [],
                "Answers": [
                    {
                        "Value": "/usr/special/secrets/",
                        "Points": 20
                    }
                ],
                "Points": 20
            }
        }
    },
    "InstructorGuide": {}
}